// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CoreStack Tests Core Stack should match snapshot 1`] = `
{
  "Mappings": {
    "LatestNodeRuntimeMap": {
      "af-south-1": {
        "value": "nodejs22.x",
      },
      "ap-east-1": {
        "value": "nodejs22.x",
      },
      "ap-east-2": {
        "value": "nodejs22.x",
      },
      "ap-northeast-1": {
        "value": "nodejs22.x",
      },
      "ap-northeast-2": {
        "value": "nodejs22.x",
      },
      "ap-northeast-3": {
        "value": "nodejs22.x",
      },
      "ap-south-1": {
        "value": "nodejs22.x",
      },
      "ap-south-2": {
        "value": "nodejs22.x",
      },
      "ap-southeast-1": {
        "value": "nodejs22.x",
      },
      "ap-southeast-2": {
        "value": "nodejs22.x",
      },
      "ap-southeast-3": {
        "value": "nodejs22.x",
      },
      "ap-southeast-4": {
        "value": "nodejs22.x",
      },
      "ap-southeast-5": {
        "value": "nodejs22.x",
      },
      "ap-southeast-7": {
        "value": "nodejs22.x",
      },
      "ca-central-1": {
        "value": "nodejs22.x",
      },
      "ca-west-1": {
        "value": "nodejs22.x",
      },
      "cn-north-1": {
        "value": "nodejs22.x",
      },
      "cn-northwest-1": {
        "value": "nodejs22.x",
      },
      "eu-central-1": {
        "value": "nodejs22.x",
      },
      "eu-central-2": {
        "value": "nodejs22.x",
      },
      "eu-isoe-west-1": {
        "value": "nodejs18.x",
      },
      "eu-north-1": {
        "value": "nodejs22.x",
      },
      "eu-south-1": {
        "value": "nodejs22.x",
      },
      "eu-south-2": {
        "value": "nodejs22.x",
      },
      "eu-west-1": {
        "value": "nodejs22.x",
      },
      "eu-west-2": {
        "value": "nodejs22.x",
      },
      "eu-west-3": {
        "value": "nodejs22.x",
      },
      "il-central-1": {
        "value": "nodejs22.x",
      },
      "me-central-1": {
        "value": "nodejs22.x",
      },
      "me-south-1": {
        "value": "nodejs22.x",
      },
      "mx-central-1": {
        "value": "nodejs22.x",
      },
      "sa-east-1": {
        "value": "nodejs22.x",
      },
      "us-east-1": {
        "value": "nodejs22.x",
      },
      "us-east-2": {
        "value": "nodejs22.x",
      },
      "us-gov-east-1": {
        "value": "nodejs22.x",
      },
      "us-gov-west-1": {
        "value": "nodejs22.x",
      },
      "us-iso-east-1": {
        "value": "nodejs18.x",
      },
      "us-iso-west-1": {
        "value": "nodejs18.x",
      },
      "us-isob-east-1": {
        "value": "nodejs18.x",
      },
      "us-isob-west-1": {
        "value": "nodejs18.x",
      },
      "us-west-1": {
        "value": "nodejs22.x",
      },
      "us-west-2": {
        "value": "nodejs22.x",
      },
    },
  },
  "Outputs": {
    "AlarmTopicArn": {
      "Value": {
        "Ref": "AlarmTopicD01E77F9",
      },
    },
    "EcrRepoUri": {
      "Value": {
        "Fn::Join": [
          "",
          [
            {
              "Fn::Select": [
                4,
                {
                  "Fn::Split": [
                    ":",
                    {
                      "Fn::GetAtt": [
                        "ProcessingAppRepo67492F23",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
            },
            ".dkr.ecr.",
            {
              "Fn::Select": [
                3,
                {
                  "Fn::Split": [
                    ":",
                    {
                      "Fn::GetAtt": [
                        "ProcessingAppRepo67492F23",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ProcessingAppRepo67492F23",
            },
          ],
        ],
      },
    },
    "InputBucketName": {
      "Value": {
        "Ref": "DocumentInputBucketE60BB293",
      },
    },
    "ProcessingQueueArn": {
      "Value": {
        "Fn::GetAtt": [
          "DocumentProcessingQueueB731B00D",
          "Arn",
        ],
      },
    },
    "ProcessingQueueUrl": {
      "Value": {
        "Ref": "DocumentProcessingQueueB731B00D",
      },
    },
    "ResultsTableName": {
      "Description": "Name of the DynamoDB table for results",
      "Value": {
        "Ref": "ProcessingResultsTableBFCBF652",
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "AlarmTopicD01E77F9": {
      "Properties": {
        "Tags": [
          {
            "Key": "environment",
            "Value": "dev",
          },
          {
            "Key": "prefix",
            "Value": "student20-dev",
          },
          {
            "Key": "project",
            "Value": "doc-pipeline-workshop",
          },
        ],
      },
      "Type": "AWS::SNS::Topic",
    },
    "AlarmTopictlaskowskygmailcom55C453A9": {
      "Properties": {
        "Endpoint": "tlaskowsky@gmail.com",
        "Protocol": "email",
        "TopicArn": {
          "Ref": "AlarmTopicD01E77F9",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "import boto3  # type: ignore
import json
import logging
import urllib.request

s3 = boto3.client("s3")

EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'
CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

def handler(event: dict, context):
  response_status = "SUCCESS"
  error_message = ""
  try:
    props = event["ResourceProperties"]
    notification_configuration = props["NotificationConfiguration"]
    managed = props.get('Managed', 'true').lower() == 'true'
    skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'
    stack_id = event['StackId']
    old = event.get("OldResourceProperties", {}).get("NotificationConfiguration", {})
    if managed:
      config = handle_managed(event["RequestType"], notification_configuration)
    else:
      config = handle_unmanaged(props["BucketName"], stack_id, event["RequestType"], notification_configuration, old)
    s3.put_bucket_notification_configuration(Bucket=props["BucketName"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)
  except Exception as e:
    logging.exception("Failed to put bucket notification configuration")
    response_status = "FAILED"
    error_message = f"Error: {str(e)}. "
  finally:
    submit_response(event, context, response_status, error_message)

def handle_managed(request_type, notification_configuration):
  if request_type == 'Delete':
    return {}
  return notification_configuration

def handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):
  def get_id(n):
    n['Id'] = ''
    sorted_notifications = sort_filter_rules(n)
    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('"Name": "prefix"', '"Name": "Prefix"').replace('"Name": "suffix"', '"Name": "Suffix"')
    return f"{stack_id}-{hash(strToHash)}"
  def with_id(n):
    n['Id'] = get_id(n)
    return n

  external_notifications = {}
  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)
  for t in CONFIGURATION_TYPES:
    if request_type == 'Update':
        old_incoming_ids = [get_id(n) for n in old.get(t, [])]
        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      
    elif request_type == 'Delete':
        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]
    elif request_type == 'Create':
        external_notifications[t] = [n for n in existing_notifications.get(t, [])]
  if EVENTBRIDGE_CONFIGURATION in existing_notifications:
    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

  if request_type == 'Delete':
    return external_notifications

  notifications = {}
  for t in CONFIGURATION_TYPES:
    external = external_notifications.get(t, [])
    incoming = [with_id(n) for n in notification_configuration.get(t, [])]
    notifications[t] = external + incoming

  if EVENTBRIDGE_CONFIGURATION in notification_configuration:
    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
  elif EVENTBRIDGE_CONFIGURATION in external_notifications:
    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

  return notifications

def submit_response(event: dict, context, response_status: str, error_message: str):
  response_body = json.dumps(
    {
      "Status": response_status,
      "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
      "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
      "StackId": event["StackId"],
      "RequestId": event["RequestId"],
      "LogicalResourceId": event["LogicalResourceId"],
      "NoEcho": False,
    }
  ).encode("utf-8")
  headers = {"content-type": "", "content-length": str(len(response_body))}
  try:
    req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
    with urllib.request.urlopen(req) as response:
      print(response.read().decode("utf-8"))
    print("Status code: " + response.reason)
  except Exception as e:
      print("send(..) failed executing request.urlopen(..): " + str(e))

def sort_filter_rules(json_obj):
  if not isinstance(json_obj, dict):
      return json_obj
  for key, value in json_obj.items():
      if isinstance(value, dict):
          json_obj[key] = sort_filter_rules(value)
      elif isinstance(value, list):
          json_obj[key] = [sort_filter_rules(item) for item in value]
  if "Filter" in json_obj and "Key" in json_obj["Filter"] and "FilterRules" in json_obj["Filter"]["Key"]:
      filter_rules = json_obj["Filter"]["Key"]["FilterRules"]
      sorted_filter_rules = sorted(filter_rules, key=lambda x: x["Name"])
      json_obj["Filter"]["Key"]["FilterRules"] = sorted_filter_rules
  return json_obj",
        },
        "Description": "AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Tags": [
          {
            "Key": "environment",
            "Value": "dev",
          },
          {
            "Key": "prefix",
            "Value": "student20-dev",
          },
          {
            "Key": "project",
            "Value": "doc-pipeline-workshop",
          },
        ],
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "environment",
            "Value": "dev",
          },
          {
            "Key": "prefix",
            "Value": "student20-dev",
          },
          {
            "Key": "project",
            "Value": "doc-pipeline-workshop",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CustomECRAutoDeleteImagesCustomResourceProviderHandler8D89C030": {
      "DependsOn": [
        "CustomECRAutoDeleteImagesCustomResourceProviderRole665F2773",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "35a53bc183aaf4d7fe84d5e5ed06d48f33ef294fa1325c16cf5db800fa6ee72d.zip",
        },
        "Description": {
          "Fn::Join": [
            "",
            [
              "Lambda function for auto-deleting images in ",
              {
                "Ref": "ProcessingAppRepo67492F23",
              },
              " repository.",
            ],
          ],
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CustomECRAutoDeleteImagesCustomResourceProviderRole665F2773",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomECRAutoDeleteImagesCustomResourceProviderRole665F2773": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "ecr:BatchDeleteImage",
                    "ecr:DescribeRepositories",
                    "ecr:ListImages",
                    "ecr:ListTagsForResource",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "ecr:ResourceTag/aws-cdk:auto-delete-images": "true",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition",
                          },
                          ":ecr:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":repository/*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "Inline",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
      "DependsOn": [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip",
        },
        "Description": {
          "Fn::Join": [
            "",
            [
              "Lambda function for auto-deleting objects in ",
              {
                "Ref": "DocumentInputBucketE60BB293",
              },
              " S3 bucket.",
            ],
          ],
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DDBSeedHandlerD7E4D3D9": {
      "DependsOn": [
        "DDBSeedHandlerServiceRoleDefaultPolicy8A6FC08D",
        "DDBSeedHandlerServiceRoleB0B3152E",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "befadfe66cac691edaa4345a4e7d6218440e02f9fbaa17776b0df5aa8d1d9096.zip",
        },
        "Environment": {
          "Variables": {
            "TABLE_NAME": {
              "Ref": "ProcessingResultsTableBFCBF652",
            },
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "DDBSeedHandlerServiceRoleB0B3152E",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Tags": [
          {
            "Key": "environment",
            "Value": "dev",
          },
          {
            "Key": "prefix",
            "Value": "student20-dev",
          },
          {
            "Key": "project",
            "Value": "doc-pipeline-workshop",
          },
        ],
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DDBSeedHandlerServiceRoleB0B3152E": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "environment",
            "Value": "dev",
          },
          {
            "Key": "prefix",
            "Value": "student20-dev",
          },
          {
            "Key": "project",
            "Value": "doc-pipeline-workshop",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DDBSeedHandlerServiceRoleDefaultPolicy8A6FC08D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ProcessingResultsTableBFCBF652",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DDBSeedHandlerServiceRoleDefaultPolicy8A6FC08D",
        "Roles": [
          {
            "Ref": "DDBSeedHandlerServiceRoleB0B3152E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DDBSeedProviderframeworkonEventE12DC2BA": {
      "DependsOn": [
        "DDBSeedProviderframeworkonEventServiceRoleDefaultPolicyE2E3A645",
        "DDBSeedProviderframeworkonEventServiceRoleA0310B95",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "bdc104ed9cab1b5b6421713c8155f0b753380595356f710400609664d3635eca.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (student20-dev-CoreStack/DDBSeedProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "DDBSeedHandlerD7E4D3D9",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "DDBSeedProviderframeworkonEventServiceRoleA0310B95",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Tags": [
          {
            "Key": "environment",
            "Value": "dev",
          },
          {
            "Key": "prefix",
            "Value": "student20-dev",
          },
          {
            "Key": "project",
            "Value": "doc-pipeline-workshop",
          },
        ],
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DDBSeedProviderframeworkonEventServiceRoleA0310B95": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "environment",
            "Value": "dev",
          },
          {
            "Key": "prefix",
            "Value": "student20-dev",
          },
          {
            "Key": "project",
            "Value": "doc-pipeline-workshop",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DDBSeedProviderframeworkonEventServiceRoleDefaultPolicyE2E3A645": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DDBSeedHandlerD7E4D3D9",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DDBSeedHandlerD7E4D3D9",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:GetFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "DDBSeedHandlerD7E4D3D9",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DDBSeedProviderframeworkonEventServiceRoleDefaultPolicyE2E3A645",
        "Roles": [
          {
            "Ref": "DDBSeedProviderframeworkonEventServiceRoleA0310B95",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DDBSeedResource": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "SeedJobId": "seed-item-student20-dev-CoreStack",
        "ServiceToken": {
          "Fn::GetAtt": [
            "DDBSeedProviderframeworkonEventE12DC2BA",
            "Arn",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "DocumentInputBucketAutoDeleteObjectsCustomResource4D64F21E": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "DocumentInputBucketPolicyAF95E3F9",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "DocumentInputBucketE60BB293",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "DocumentInputBucketE60BB293": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
          {
            "Key": "environment",
            "Value": "dev",
          },
          {
            "Key": "prefix",
            "Value": "student20-dev",
          },
          {
            "Key": "project",
            "Value": "doc-pipeline-workshop",
          },
        ],
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "DocumentInputBucketNotifications7D557A1E": {
      "DependsOn": [
        "DocumentInputBucketPolicyAF95E3F9",
        "DocumentProcessingQueuePolicyFB14258E",
        "DocumentProcessingQueueB731B00D",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "DocumentInputBucketE60BB293",
        },
        "Managed": true,
        "NotificationConfiguration": {
          "QueueConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*",
              ],
              "Filter": {
                "Key": {
                  "FilterRules": [
                    {
                      "Name": "suffix",
                      "Value": ".pdf",
                    },
                  ],
                },
              },
              "QueueArn": {
                "Fn::GetAtt": [
                  "DocumentProcessingQueueB731B00D",
                  "Arn",
                ],
              },
            },
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
        "SkipDestinationValidation": false,
      },
      "Type": "Custom::S3BucketNotifications",
    },
    "DocumentInputBucketPolicyAF95E3F9": {
      "Properties": {
        "Bucket": {
          "Ref": "DocumentInputBucketE60BB293",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DocumentInputBucketE60BB293",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DocumentInputBucketE60BB293",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DocumentInputBucketE60BB293",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DocumentInputBucketE60BB293",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "DocumentProcessingQueueB731B00D": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "SqsManagedSseEnabled": true,
        "Tags": [
          {
            "Key": "environment",
            "Value": "dev",
          },
          {
            "Key": "prefix",
            "Value": "student20-dev",
          },
          {
            "Key": "project",
            "Value": "doc-pipeline-workshop",
          },
        ],
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "DocumentProcessingQueuePolicyFB14258E": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
              ],
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": {
                    "Fn::GetAtt": [
                      "DocumentInputBucketE60BB293",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "s3.amazonaws.com",
              },
              "Resource": {
                "Fn::GetAtt": [
                  "DocumentProcessingQueueB731B00D",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": [
          {
            "Ref": "DocumentProcessingQueueB731B00D",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "ProcessingAppRepo67492F23": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ImageScanningConfiguration": {
          "ScanOnPush": true,
        },
        "RepositoryName": "student20-dev-processor-repo",
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-images",
            "Value": "true",
          },
          {
            "Key": "environment",
            "Value": "dev",
          },
          {
            "Key": "prefix",
            "Value": "student20-dev",
          },
          {
            "Key": "project",
            "Value": "doc-pipeline-workshop",
          },
        ],
      },
      "Type": "AWS::ECR::Repository",
      "UpdateReplacePolicy": "Delete",
    },
    "ProcessingAppRepoAutoDeleteImagesCustomResource8C315426": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "ProcessingAppRepo67492F23",
      ],
      "Properties": {
        "RepositoryName": {
          "Ref": "ProcessingAppRepo67492F23",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomECRAutoDeleteImagesCustomResourceProviderHandler8D89C030",
            "Arn",
          ],
        },
      },
      "Type": "Custom::ECRAutoDeleteImages",
      "UpdateReplacePolicy": "Delete",
    },
    "ProcessingResultsTableBFCBF652": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "jobId",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "jobId",
            "KeyType": "HASH",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
        },
        "Tags": [
          {
            "Key": "environment",
            "Value": "dev",
          },
          {
            "Key": "PITR-Enabled",
            "Value": "true",
          },
          {
            "Key": "prefix",
            "Value": "student20-dev",
          },
          {
            "Key": "project",
            "Value": "doc-pipeline-workshop",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "QueueDepthAlarmD4A3A893": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "AlarmTopicD01E77F9",
          },
        ],
        "AlarmDescription": "Alarm if SQS queue depth exceeds threshold",
        "AlarmName": "student20-dev-CoreStack-QueueDepthAlarm",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "QueueName",
            "Value": {
              "Fn::GetAtt": [
                "DocumentProcessingQueueB731B00D",
                "QueueName",
              ],
            },
          },
        ],
        "EvaluationPeriods": 2,
        "MetricName": "ApproximateNumberOfMessagesVisible",
        "Namespace": "AWS/SQS",
        "Period": 60,
        "Statistic": "Maximum",
        "Threshold": 5,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
